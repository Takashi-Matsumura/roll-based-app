// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

enum Role {
  GUEST
  USER
  MANAGER
  BACKOFFICE
  ADMIN
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  role          Role          @default(USER)
  language      String        @default("en") // Language preference: "en" or "ja"
  accounts      Account[]
  sessions      Session[]
  userAccessKeys UserAccessKey[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// 権限（メニュー）の定義
model Permission {
  id                    String                  @id @default(cuid())
  name                  String                  @unique // 例: "reports", "analytics", "advanced_settings"
  displayName           String                  // 表示名
  description           String?                 // 説明
  menuPath              String                  // メニューのパス 例: "/reports"
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  accessKeyPermissions  AccessKeyPermission[]
}

// アクセスキー（イレギュラーなメニューアクセスの認可用）
model AccessKey {
  id              String                @id @default(cuid())
  key             String                @unique // アクセスキー本体（ランダム生成）
  name            String                // キーの名前/説明
  expiresAt       DateTime              // 有効期限
  isActive        Boolean               @default(true) // 有効/無効
  createdBy       String                // 作成者（AdminのユーザーID）
  createdAt       DateTime              @default(now())
  updatedAt       DateTime              @updatedAt
  permissions     AccessKeyPermission[]
  userAccessKeys  UserAccessKey[]
}

// アクセスキーと権限の関連付け
model AccessKeyPermission {
  id           String     @id @default(cuid())
  accessKeyId  String
  permissionId String
  accessKey    AccessKey  @relation(fields: [accessKeyId], references: [id], onDelete: Cascade)
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  createdAt    DateTime   @default(now())

  @@unique([accessKeyId, permissionId])
}

// ユーザーが登録したアクセスキー
model UserAccessKey {
  id          String    @id @default(cuid())
  userId      String
  accessKeyId String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessKey   AccessKey @relation(fields: [accessKeyId], references: [id], onDelete: Cascade)
  activatedAt DateTime  @default(now())

  @@unique([userId, accessKeyId])
}
